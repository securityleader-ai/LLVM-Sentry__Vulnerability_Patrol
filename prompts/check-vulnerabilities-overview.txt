
# Generated with Gemini-1.5-Flash - Poe
# Copyright (c) 2023, The Gemini Project (https://gemini.com)
# Copyright (c) 2024, Gurvinder Singh

**Overview:**

This prompt is designed to leverage the power of a Large Language Model (LLM) to analyze code for security vulnerabilities and provide actionable recommendations for developers. It goes beyond simply identifying vulnerabilities by incorporating a comprehensive approach that includes:

* **Standard-Based Analysis:** The prompt instructs the LLM to analyze the code based on widely recognized security standards like OWASP Top 10, CWE, SANS Top 25, and MITRE ATT&CK.
* **Contextual Understanding:** The prompt gathers information about the application's type, deployment environment, user base, and existing security controls to provide context-aware recommendations.
* **Threat Modeling:** The prompt includes a threat model that defines potential threats and attack vectors, helping the LLM focus on relevant vulnerabilities.
* **Security Best Practices:** The prompt lists common security best practices that the LLM can use to identify potential violations in the code.
* **Code Refactoring Suggestions:** The prompt encourages the LLM to provide suggestions for refactoring the code to improve its security posture.
* **Actionable Mitigation:** The prompt requests the LLM to generate WAF rules (for ModSecurity and Suricata) and YARA rules for proactive detection and mitigation of identified vulnerabilities.

**Key Points:**

1. **Comprehensive Security Analysis:** The prompt combines multiple approaches to provide a comprehensive security analysis, including vulnerability identification, remediation advice, and proactive detection mechanisms.
2. **Actionable Recommendations:** The prompt focuses on providing actionable recommendations that developers can easily implement, including code refactoring suggestions, WAF rules, and YARA rules.
3. **Educational Value:** The prompt includes information about security best practices, threat models, and common vulnerabilities, helping developers understand security risks and write more secure code.
4. **Improved Security Posture:** By leveraging the LLM's capabilities and providing actionable mitigation strategies, the prompt helps developers improve the overall security posture of their applications.
5. **Collaboration with Security Professionals:** The prompt emphasizes the importance of reviewing and validating the LLM's output with security professionals before implementing any changes.

**Benefits of Using This Prompt:**

* **Increased Security Awareness:** Developers gain a deeper understanding of security risks and best practices.
* **Improved Code Quality:** The prompt encourages developers to write more secure code by providing actionable recommendations and refactoring suggestions.
* **Proactive Threat Detection:** The prompt helps developers proactively detect and mitigate threats through the use of WAF and YARA rules.
* **Reduced Development Time:** The LLM can automate much of the security analysis process, allowing developers to focus on other tasks.

By using this comprehensive and well-defined prompt, you can effectively leverage LLMs to analyze code for security vulnerabilities and significantly improve the security of your applications.